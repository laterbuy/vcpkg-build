name: Build FFmpeg DLL for Windows

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-ffmpeg:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-binutils
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-nasm
          mingw-w64-x86_64-yasm
          base-devel
          git
          
    - name: Install dependencies
      shell: msys2 {0}
      run: |
        pacman -S --noconfirm \
          mingw-w64-x86_64-x264 \
          mingw-w64-x86_64-zlib \
          mingw-w64-x86_64-bzip2 \
          mingw-w64-x86_64-lame \
          mingw-w64-x86_64-libvorbis \
          mingw-w64-x86_64-opus \
          mingw-w64-x86_64-libiconv
          
    - name: Verify toolchain
      shell: msys2 {0}
      run: |
        echo "Checking toolchain installation..."
        echo "Current environment: $MSYSTEM"
        echo "PATH: $PATH"
        
        # Check for native mingw tools
        echo "=== Native mingw tools ==="
        ls -la /mingw64/bin/gcc* || echo "native gcc not found"
        ls -la /mingw64/bin/ar* || echo "native ar not found"
        
        # Check for cross-compilation tools
        echo "=== Cross-compilation tools ==="
        which x86_64-w64-mingw32-gcc || echo "cross-gcc not found"
        which x86_64-w64-mingw32-ar || echo "cross-ar not found"
        which x86_64-w64-mingw32-nm || echo "cross-nm not found"
        which x86_64-w64-mingw32-ranlib || echo "cross-ranlib not found"
        
        # List all available tools
        echo "=== All x86_64-w64-mingw32 tools ==="
        ls -la /mingw64/bin/*mingw32* 2>/dev/null || echo "no mingw32 tools found"
        
        # Check if we can use native tools instead
        echo "=== Testing native tools ==="
        /mingw64/bin/gcc --version || echo "native gcc failed"
        /mingw64/bin/ar --version || echo "native ar failed"
        
    - name: Download FFmpeg source
      shell: msys2 {0}
      run: |
        git clone --depth 1 --branch n6.1 https://git.ffmpeg.org/ffmpeg.git
        cd ffmpeg
        
    - name: Configure FFmpeg
      shell: msys2 {0}
      run: |
        cd ffmpeg
        export PATH="/mingw64/bin:$PATH"
        
        # Try to use cross-compilation tools, fallback to native tools
        if command -v x86_64-w64-mingw32-ar >/dev/null 2>&1; then
          export AR="x86_64-w64-mingw32-ar"
          export NM="x86_64-w64-mingw32-nm"
          export RANLIB="x86_64-w64-mingw32-ranlib"
          export STRIP="x86_64-w64-mingw32-strip"
          export CC="x86_64-w64-mingw32-gcc"
          CROSS_PREFIX="x86_64-w64-mingw32-"
        else
          echo "Using native mingw tools"
          export AR="ar"
          export NM="nm"
          export RANLIB="ranlib"
          export STRIP="strip"
          export CC="gcc"
          CROSS_PREFIX=""
        fi
        
        ./configure \
          --prefix=/mingw64 \
          --arch=x86_64 \
          --target-os=mingw32 \
          --cross-prefix="$CROSS_PREFIX" \
          --enable-cross-compile \
          --enable-shared \
          --disable-static \
          --disable-debug \
          --disable-doc \
          --enable-ffmpeg \
          --enable-ffprobe \
          --disable-everything \
          --enable-avcodec \
          --enable-avformat \
          --enable-avutil \
          --enable-swscale \
          --enable-swresample \
          --enable-avfilter \
          --enable-avdevice \
          --enable-postproc \
          --enable-protocol=file \
          --enable-protocol=pipe \
          --enable-demuxer=mov \
          --enable-demuxer=mp4 \
          --enable-muxer=mp4 \
          --enable-encoder=libx264 \
          --enable-encoder=h264_qsv \
          --enable-encoder=h264_amf \
          --enable-decoder=h264 \
          --enable-decoder=h264_qsv \
          --enable-parser=h264 \
          --enable-bsf=h264_mp4toannexb \
          --enable-filter=scale \
          --enable-filter=null \
          --enable-filter=anull \
          --enable-filter=format \
          --enable-libx264 \
          --enable-gpl \
          --enable-version3 \
          --enable-nonfree \
          --enable-runtime-cpudetect \
          --extra-cflags="-O3" \
          --extra-ldflags="-static-libgcc -static-libstdc++"
          
    - name: Build FFmpeg
      shell: msys2 {0}
      run: |
        cd ffmpeg
        export PATH="/mingw64/bin:$PATH"
        
        # Use the same toolchain detection as configure step
        if command -v x86_64-w64-mingw32-ar >/dev/null 2>&1; then
          export AR="x86_64-w64-mingw32-ar"
          export NM="x86_64-w64-mingw32-nm"
          export RANLIB="x86_64-w64-mingw32-ranlib"
          export STRIP="x86_64-w64-mingw32-strip"
          export CC="x86_64-w64-mingw32-gcc"
        else
          echo "Using native mingw tools"
          export AR="ar"
          export NM="nm"
          export RANLIB="ranlib"
          export STRIP="strip"
          export CC="gcc"
        fi
        
        make -j$(nproc)
        make install DESTDIR=/tmp/ffmpeg-install
        
    - name: Prepare artifacts
      shell: msys2 {0}
      run: |
        mkdir -p ffmpeg-windows-h264
        mkdir -p ffmpeg-windows-h264/bin
        mkdir -p ffmpeg-windows-h264/lib
        mkdir -p ffmpeg-windows-h264/include
        
        # Copy main FFmpeg DLLs (prefer versioned ones)
        cp /tmp/ffmpeg-install/mingw64/bin/avcodec-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /tmp/ffmpeg-install/mingw64/bin/avformat-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /tmp/ffmpeg-install/mingw64/bin/avutil-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /tmp/ffmpeg-install/mingw64/bin/swscale-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /tmp/ffmpeg-install/mingw64/bin/swresample-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /tmp/ffmpeg-install/mingw64/bin/avfilter-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /tmp/ffmpeg-install/mingw64/bin/avdevice-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /tmp/ffmpeg-install/mingw64/bin/postproc-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        
        # Copy executable files
        cp /tmp/ffmpeg-install/mingw64/bin/ffmpeg.exe ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /tmp/ffmpeg-install/mingw64/bin/ffprobe.exe ffmpeg-windows-h264/bin/ 2>/dev/null || true
        
        # If built in source directory, copy from there
        cp ffmpeg/ffmpeg.exe ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/ffprobe.exe ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/libavcodec/*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/libavformat/*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/libavutil/*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/libswscale/*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/libswresample/*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/libavfilter/*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/libavdevice/*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp ffmpeg/libpostproc/*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        
        # Copy lib files
        cp /tmp/ffmpeg-install/mingw64/lib/*.dll.a ffmpeg-windows-h264/lib/ || true
        cp /tmp/ffmpeg-install/mingw64/lib/pkgconfig ffmpeg-windows-h264/lib/ -r || true
        
        # Copy headers
        cp /tmp/ffmpeg-install/mingw64/include/libav* ffmpeg-windows-h264/include/ -r || true
        cp /tmp/ffmpeg-install/mingw64/include/libsw* ffmpeg-windows-h264/include/ -r || true
        
        # Copy required MinGW DLLs
        cp /mingw64/bin/libgcc_s_seh-1.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /mingw64/bin/libwinpthread-1.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /mingw64/bin/libstdc++-6.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /mingw64/bin/libx264-*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        
        # Copy dependency DLLs
        cp /mingw64/bin/zlib1.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /mingw64/bin/libiconv-2.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /mingw64/bin/libcharset-1.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /mingw64/bin/libbz2-1.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /mingw64/bin/libva*.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        
        # Copy additional dependencies that might be needed
        echo "Copying additional dependencies..."
        cp /mingw64/bin/msys-2.0.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        cp /mingw64/bin/libintl-8.dll ffmpeg-windows-h264/bin/ 2>/dev/null || true
        
        # Create README
        cat > ffmpeg-windows-h264/README.md << 'EOF'
        # FFmpeg Windows H.264 Build
        
        This build includes:
        - H.264 software encoding via libx264
        - H.264 hardware encoding (Intel QSV, AMD AMF)
        - H.264 hardware decoding (Intel QSV)
        - Optimized for H.264 video processing
        - Dynamic libraries (.dll files) with all dependencies
        - Command-line tools (ffmpeg.exe, ffprobe.exe)
        
        ## Dependencies included:
        All required DLL dependencies are bundled, including:
        - zlib1.dll (compression support)
        - libiconv-2.dll (character encoding)
        - libcharset-1.dll (character set support)
        - libbz2-1.dll (bzip2 compression)
        - libx264 libraries
        - MinGW runtime libraries
        
        ## Usage
        Add the `bin` directory to your PATH or place the DLL files alongside your application.
        
        ### Command-line tools:
        - `ffmpeg.exe` - Main FFmpeg tool for video/audio processing
        - `ffprobe.exe` - Media analysis tool
        
        ### Example usage:
        ```bash
        # Software encoding with libx264
        ffmpeg -i input.mp4 -c:v libx264 -preset medium -crf 23 output.mp4
        
        # Hardware encoding with Intel QSV
        ffmpeg -i input.mp4 -c:v h264_qsv -preset medium output.mp4
        
        # Hardware encoding with AMD AMF
        ffmpeg -i input.mp4 -c:v h264_amf -quality balanced output.mp4
        
        # Scale and encode
        ffmpeg -i input.mp4 -vf scale=1280:720 -c:v libx264 output_720p.mp4
        
        # Analyze media file
        ffprobe -v quiet -print_format json -show_format -show_streams input.mp4
        ```
        
        ## Included features:
        - libx264 software H.264 encoding
        - h264_qsv Intel Quick Sync Video hardware encoding/decoding
        - h264_amf AMD hardware encoding
        - H.264 software decoding
        - MP4/MOV container support
        - Audio/video filtering (scale, format, null filters)
        - Audio resampling support
        - Device input/output support
        - Post-processing support
        - File I/O protocols
        EOF
        
        # List files for verification
        echo "Generated files:"
        find ffmpeg-windows-h264 -type f
        
    - name: Upload FFmpeg artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-windows-h264-dll
        path: ffmpeg-windows-h264/
        retention-days: 30
        
    - name: Create zip for release
      if: startsWith(github.ref, 'refs/tags/')
      shell: msys2 {0}
      run: |
        cd ffmpeg-windows-h264
        zip -r ../ffmpeg-windows-h264.zip .
        cd ..
        
    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ffmpeg-windows-h264.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
